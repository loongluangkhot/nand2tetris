// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=loadMsb0, b=loadMsb1, c=loadMsb2, d=loadMsb3, e=loadMsb4, f=loadMsb5, g=loadMsb6, h=loadMsb7);
    RAM8(in=in, load=loadMsb0, address=address[0..2], out=outMsb0);
    RAM8(in=in, load=loadMsb1, address=address[0..2], out=outMsb1);
    RAM8(in=in, load=loadMsb2, address=address[0..2], out=outMsb2);
    RAM8(in=in, load=loadMsb3, address=address[0..2], out=outMsb3);
    RAM8(in=in, load=loadMsb4, address=address[0..2], out=outMsb4);
    RAM8(in=in, load=loadMsb5, address=address[0..2], out=outMsb5);
    RAM8(in=in, load=loadMsb6, address=address[0..2], out=outMsb6);
    RAM8(in=in, load=loadMsb7, address=address[0..2], out=outMsb7);
    Mux8Way16(a=outMsb0, b=outMsb1, c=outMsb2, d=outMsb3, e=outMsb4, f=outMsb5, g=outMsb6, h=outMsb7, sel=address[3..5], out=out);
}